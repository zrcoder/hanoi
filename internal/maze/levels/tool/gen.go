package main

import (
	"bytes"
	"io/fs"
	"os"
	"path/filepath"
	"strconv"
)

func main() {
	dir := filepath.Join("internal", "maze", "levels")
	dir, err := filepath.Abs(dir)
	if err != nil {
		panic(err)
	}
	const txtExt = ".txt"
	buf := bytes.NewBuffer(nil)
	buf.WriteString(`// generated by tools, don't modify

package levels

import (
	"embed"
)

//go:embed classic
var fs embed.FS

var Names = []string{
`)
	classic := filepath.Join(dir, "classic")
	err = filepath.WalkDir(classic, func(path string, d fs.DirEntry, errin error) error {
		if errin != nil {
			return errin
		}
		if filepath.Ext(path) == txtExt {
			name := d.Name()
			buf.WriteString("\t" + strconv.Quote(name[:len(name)-len(txtExt)]) + ",\n")
		}
		return nil
	})
	if err != nil {
		panic(err)
	}

	buf.WriteString("}\n")
	buf.WriteString(`
func ReadLevel(s string) (string, error) {
	data, err := fs.ReadFile("classic/"+s+".txt")
	return string(data), err
}
`)
	err = os.WriteFile(filepath.Join(dir, "levels.go"), buf.Bytes(), 0600)
	if err != nil {
		panic(err)
	}
}
